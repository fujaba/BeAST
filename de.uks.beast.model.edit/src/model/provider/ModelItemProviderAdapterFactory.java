/**
 */
package model.provider;

import java.util.ArrayList;
import java.util.Collection;

import model.util.ModelAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelItemProviderAdapterFactory extends ModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Server} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServerItemProvider serverItemProvider;

	/**
	 * This creates an adapter for a {@link model.Server}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServerAdapter()
	{
		if (serverItemProvider == null)
		{
			serverItemProvider = new ServerItemProvider(this);
		}

		return serverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link model.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter()
	{
		if (groupItemProvider == null)
		{
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Network} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkItemProvider networkItemProvider;

	/**
	 * This creates an adapter for a {@link model.Network}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkAdapter()
	{
		if (networkItemProvider == null)
		{
			networkItemProvider = new NetworkItemProvider(this);
		}

		return networkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Router} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RouterItemProvider routerItemProvider;

	/**
	 * This creates an adapter for a {@link model.Router}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRouterAdapter()
	{
		if (routerItemProvider == null)
		{
			routerItemProvider = new RouterItemProvider(this);
		}

		return routerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.HadoopMaster} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HadoopMasterItemProvider hadoopMasterItemProvider;

	/**
	 * This creates an adapter for a {@link model.HadoopMaster}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHadoopMasterAdapter()
	{
		if (hadoopMasterItemProvider == null)
		{
			hadoopMasterItemProvider = new HadoopMasterItemProvider(this);
		}

		return hadoopMasterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.HadoopSlave} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HadoopSlaveItemProvider hadoopSlaveItemProvider;

	/**
	 * This creates an adapter for a {@link model.HadoopSlave}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHadoopSlaveAdapter()
	{
		if (hadoopSlaveItemProvider == null)
		{
			hadoopSlaveItemProvider = new HadoopSlaveItemProvider(this);
		}

		return hadoopSlaveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.MySQL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MySQLItemProvider mySQLItemProvider;

	/**
	 * This creates an adapter for a {@link model.MySQL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMySQLAdapter()
	{
		if (mySQLItemProvider == null)
		{
			mySQLItemProvider = new MySQLItemProvider(this);
		}

		return mySQLItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.WordPress} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WordPressItemProvider wordPressItemProvider;

	/**
	 * This creates an adapter for a {@link model.WordPress}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWordPressAdapter()
	{
		if (wordPressItemProvider == null)
		{
			wordPressItemProvider = new WordPressItemProvider(this);
		}

		return wordPressItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Cassandra} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CassandraItemProvider cassandraItemProvider;

	/**
	 * This creates an adapter for a {@link model.Cassandra}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCassandraAdapter()
	{
		if (cassandraItemProvider == null)
		{
			cassandraItemProvider = new CassandraItemProvider(this);
		}

		return cassandraItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.MongoDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MongoDBItemProvider mongoDBItemProvider;

	/**
	 * This creates an adapter for a {@link model.MongoDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMongoDBAdapter()
	{
		if (mongoDBItemProvider == null)
		{
			mongoDBItemProvider = new MongoDBItemProvider(this);
		}

		return mongoDBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Ubuntu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UbuntuItemProvider ubuntuItemProvider;

	/**
	 * This creates an adapter for a {@link model.Ubuntu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbuntuAdapter()
	{
		if (ubuntuItemProvider == null)
		{
			ubuntuItemProvider = new UbuntuItemProvider(this);
		}

		return ubuntuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Apache2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Apache2ItemProvider apache2ItemProvider;

	/**
	 * This creates an adapter for a {@link model.Apache2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApache2Adapter()
	{
		if (apache2ItemProvider == null)
		{
			apache2ItemProvider = new Apache2ItemProvider(this);
		}

		return apache2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Jenkins} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JenkinsItemProvider jenkinsItemProvider;

	/**
	 * This creates an adapter for a {@link model.Jenkins}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJenkinsAdapter()
	{
		if (jenkinsItemProvider == null)
		{
			jenkinsItemProvider = new JenkinsItemProvider(this);
		}

		return jenkinsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.MediaWiki} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MediaWikiItemProvider mediaWikiItemProvider;

	/**
	 * This creates an adapter for a {@link model.MediaWiki}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMediaWikiAdapter()
	{
		if (mediaWikiItemProvider == null)
		{
			mediaWikiItemProvider = new MediaWikiItemProvider(this);
		}

		return mediaWikiItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link model.Tomcat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TomcatItemProvider tomcatItemProvider;

	/**
	 * This creates an adapter for a {@link model.Tomcat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTomcatAdapter()
	{
		if (tomcatItemProvider == null)
		{
			tomcatItemProvider = new TomcatItemProvider(this);
		}

		return tomcatItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose()
	{
		if (serverItemProvider != null) serverItemProvider.dispose();
		if (groupItemProvider != null) groupItemProvider.dispose();
		if (networkItemProvider != null) networkItemProvider.dispose();
		if (routerItemProvider != null) routerItemProvider.dispose();
		if (hadoopMasterItemProvider != null) hadoopMasterItemProvider.dispose();
		if (hadoopSlaveItemProvider != null) hadoopSlaveItemProvider.dispose();
		if (mySQLItemProvider != null) mySQLItemProvider.dispose();
		if (wordPressItemProvider != null) wordPressItemProvider.dispose();
		if (cassandraItemProvider != null) cassandraItemProvider.dispose();
		if (mongoDBItemProvider != null) mongoDBItemProvider.dispose();
		if (ubuntuItemProvider != null) ubuntuItemProvider.dispose();
		if (apache2ItemProvider != null) apache2ItemProvider.dispose();
		if (jenkinsItemProvider != null) jenkinsItemProvider.dispose();
		if (mediaWikiItemProvider != null) mediaWikiItemProvider.dispose();
		if (tomcatItemProvider != null) tomcatItemProvider.dispose();
	}

}
